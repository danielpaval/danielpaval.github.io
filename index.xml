<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>My Blog</title><link>https://danielpaval.github.io/</link><description>Recent content on My Blog</description><generator>Hugo -- 0.145.0</generator><language>en-us</language><lastBuildDate>Wed, 05 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://danielpaval.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>To Envoy or not to Envoy</title><link>https://danielpaval.github.io/posts/2025-03-05-to-envoy-or-not-to-envoy/</link><pubDate>Wed, 05 Mar 2025 00:00:00 +0000</pubDate><guid>https://danielpaval.github.io/posts/2025-03-05-to-envoy-or-not-to-envoy/</guid><description>&lt;p>I recently came across the need for a reusable microservice in the form of an OCI / Docker image to meet different authentication and authorization requirements depending on the end project and environment. While the current limited set of possible security configurations is handled by the microservice itself, I analyzed the possibility of delegating this aspect to a specialized sidecar container living in the same Kubernetes pod.&lt;/p>
&lt;p>After a bit of prompt engineering and wanting to consider something else than NGINX I decided to first try &lt;a href="https://www.envoyproxy.io/">Envoy Proxy&lt;/a>. Long story short, here&amp;rsquo;s a Docker Compose setup:&lt;/p></description></item><item><title>Claude Code - Hello world!</title><link>https://danielpaval.github.io/posts/2025-03-02-claude-code-hello-world/</link><pubDate>Sun, 02 Mar 2025 00:00:00 +0000</pubDate><guid>https://danielpaval.github.io/posts/2025-03-02-claude-code-hello-world/</guid><description>&lt;p>As I heard about Claude Code at the end of this week&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, I wanted to try it out myself. It took a bit of time to get the CLI going as Claude Code only works on Linux, and my WSL Node.js setup was both old and misconfigured.&lt;/p>
&lt;p>The task I put it up to was to help me show the hidden posts of this Hugo site, as I had no clues. Honestly, I was surprised to hit a speed bump already, having to buy some token credits first ($5) without any trial. But then it correctly suggested that I forgot about the &lt;code>draft: true&lt;/code> front matter field I had copy-pasted in multiple locations.&lt;/p></description></item><item><title>Hugo vs Jekyll</title><link>https://danielpaval.github.io/posts/2025-03-01-hugo-vs-jekyll/</link><pubDate>Sat, 01 Mar 2025 00:00:00 +0000</pubDate><guid>https://danielpaval.github.io/posts/2025-03-01-hugo-vs-jekyll/</guid><description>&lt;p>I just got to make a bit of progress on building a technical blog which is something I started to think about a few years ago. Back at the beginning, the focus was on getting familiar with static site generators, mainly Jekyll and Hugo.&lt;/p>
&lt;p>Now, I&amp;rsquo;m going with Hugo for, mostly, simplicity:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Feature&lt;/th>
&lt;th>Hugo 🏎️&lt;/th>
&lt;th>Jekyll 📝&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>Performance&lt;/strong>&lt;/td>
&lt;td>⚡ Extremely fast (built with Go)&lt;/td>
&lt;td>🚶 Slower (built with Ruby)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Installation&lt;/strong>&lt;/td>
&lt;td>✅ Single binary, no dependencies&lt;/td>
&lt;td>❌ Requires Ruby and Bundler&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Templates&lt;/strong>&lt;/td>
&lt;td>⚠️ Uses Go templates (harder to learn)&lt;/td>
&lt;td>✅ Uses Liquid templates (easier)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Content Format&lt;/strong>&lt;/td>
&lt;td>✅ Markdown, TOML/YAML/JSON&lt;/td>
&lt;td>✅ Markdown, YAML&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Plugins&lt;/strong>&lt;/td>
&lt;td>❌ No plugin system (built-in features only)&lt;/td>
&lt;td>✅ Supports plugins for more functionality&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>GitHub Pages&lt;/strong>&lt;/td>
&lt;td>⚠️ Requires extra setup&lt;/td>
&lt;td>✅ Natively supported&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Ease of Use&lt;/strong>&lt;/td>
&lt;td>❌ Steeper learning curve&lt;/td>
&lt;td>✅ Easier for beginners&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Best For&lt;/strong>&lt;/td>
&lt;td>🚀 Speed, large sites, developers&lt;/td>
&lt;td>✍️ Blogs, simple websites, GitHub Pages&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Win32 Epoch (1/1/1601)</title><link>https://danielpaval.github.io/posts/2022-06-18-win32-epoch/</link><pubDate>Sat, 18 Jun 2022 00:00:00 +0000</pubDate><guid>https://danielpaval.github.io/posts/2022-06-18-win32-epoch/</guid><description>&lt;blockquote>
&lt;p>ℹ️ This is a quick blog post to mainly play with Jekyll.&lt;/p>&lt;/blockquote>
&lt;p>Not long ago Windows on my laptop reported that Skype was last used on &lt;em>1/1/1601&lt;/em>.. While I rarely use Skype now-a-days, it surely wasn&amp;rsquo;t that long! January 1&lt;!-- raw HTML omitted -->st&lt;!-- raw HTML omitted --> does hint at some kind of a date baseline, just like the Unix epoch, but why &lt;em>1601&lt;/em>?&lt;/p>
&lt;p>&lt;img alt="Image description" loading="lazy" src="https://danielpaval.github.io/assets/win32-epoch-cleanup.png">&lt;/p>
&lt;p>Of course, this was a quick answer to look up and it turns out to be that &lt;em>&amp;ldquo;1601 was the first year of the 400-year Gregorian calendar cycle at the time Windows NT was made&amp;rdquo;&lt;/em>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. More specifically, &lt;em>&amp;ldquo;The &lt;code>FILETIME&lt;/code> structure records time in the form of 100-nanosecond intervals since January 1, 1601&amp;rdquo;&lt;/em>&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>.&lt;/p></description></item></channel></rss>